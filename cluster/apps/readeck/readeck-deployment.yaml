apiVersion: apps/v1
kind: Deployment
metadata:
  name: readeck
  namespace: readeck
  labels:
    app: readeck
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: readeck
  template:
    metadata:
      labels:
        app: readeck
    spec:
      initContainers:
        - name: wait-for-db
          image: busybox:1.36
          command: 
            - /bin/sh
            - -c
            - |
              until nc -zv readeck-postgres-postgresql.readeck.svc.cluster.local 5432; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
      containers:
        - name: readeck
          image: codeberg.org/readeck/readeck:0.14.0
          # Añadimos un 'command' para usar un shell
          command: ["/bin/sh", "-c"]
          args:
            # El shell construye la variable y luego ejecuta la aplicación
            - |
              export READECK_DATABASE_SOURCE="postgres://${DB_USERNAME}:${DB_PASSWORD}@readeck-postgres-postgresql.readeck.svc.cluster.local:5432/readeck?sslmode=disable"
              /readeck
          ports:
            - containerPort: 8000
              name: http
          env:
            # Estas variables ahora son leídas por el shell
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: readeck-secrets
                  key: postgres-password
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: readeck-secrets
                  key: postgres-password
            # Variables de entorno originales de la aplicación
            - name: READECK_SERVER_HOST
              value: "0.0.0.0"
            - name: READECK_SERVER_PORT
              value: "8000"
            - name: READECK_DATABASE_DRIVER
              value: "postgres"
            - name: READECK_LOG_LEVEL
              value: "info"
            - name: TZ
              value: "America/Mexico_City"
          volumeMounts:
            - name: readeck-data
              mountPath: /readeck
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: readeck-data
          persistentVolumeClaim:
            claimName: readeck-data