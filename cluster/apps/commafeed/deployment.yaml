apiVersion: apps/v1
kind: Deployment
metadata:
  name: commafeed
  namespace: media-stack
  labels:
    app: commafeed
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: commafeed
  template:
    metadata:
      labels:
        app: commafeed
    spec:
      # Add init container to wait for database
      initContainers:
        - name: wait-for-db
          image: postgres:15
          command: ['sh', '-c']
          args:
            - |
              until pg_isready -h commafeed-db-postgresql.media-stack.svc.cluster.local -p 5432 -U commafeed; do
                echo "Waiting for database to be ready..."
                sleep 2
              done
              echo "Database is ready!"
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: commafeed-creds
                  key: DB_PASSWORD
      containers:
        - name: commafeed
          image: athou/commafeed:5.10.0-postgresql-jvm
          env:
            - name: QUARKUS_DATASOURCE_JDBC_URL
              value: "jdbc:postgresql://commafeed-db-postgresql.media-stack.svc.cluster.local:5432/commafeed"
            - name: QUARKUS_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: commafeed-creds
                  key: DB_USER
            - name: QUARKUS_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: commafeed-creds
                  key: DB_PASSWORD
            # Add additional environment variables for CommAFeed
            - name: COMMAFEED_DB_URL
              value: "postgresql://commafeed-db-postgresql.media-stack.svc.cluster.local:5432/commafeed"
            - name: COMMAFEED_DB_USER
              valueFrom:
                secretKeyRef:
                  name: commafeed-creds
                  key: DB_USER
            - name: COMMAFEED_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: commafeed-creds
                  key: DB_PASSWORD
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "256Mi"
              cpu: "150m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          # Add health checks
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5